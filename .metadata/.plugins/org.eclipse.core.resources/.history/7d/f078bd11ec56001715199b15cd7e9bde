package com.mycompany;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextArea;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.link.Link;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.Model;
import org.apache.wicket.request.mapper.parameter.PageParameters;

public class HomePage extends WebPage {

	private static final long serialVersionUID = 3598788934381254916L;

	private Form form = new Form("f") {
		private static final long serialVersionUID = -1700095884500348972L;

		@Override
		protected void onSubmit() {
			System.out.println("送信ボタンが押されました");
			ResultPage result = new ResultPage((HomePage) this.getParent());
			setResponsePage(result);
		}
	};

	// テスト追加

	// テスト追加

	private Model mSubject = new Model();

	private Model mSubject2 = new Model();

	private Model mType = new Model();

	private Model mDate = new Model(new Date());

	private Model mArticle = new Model();

	private Model mArticle2 = new Model();

	private FeedbackPanel feedback = new FeedbackPanel("msg");

	public HomePage(final PageParameters parameters) {

		add(feedback);

		add(form);

		TextField txtSubject = new TextField("subject", mSubject);
		txtSubject.setRequired(true);
		form.add(txtSubject);

		TextField txtSubject2 = new TextField("subject2", mSubject2);
		txtSubject2.setRequired(true);
		form.add(txtSubject2);

		final String test1 = "日記";
		String test2 = "本のレビュー";
		String test3 = "メモ";
		String test4 = "ダイエット";
		String test5 = "追加のメモ";
		String test6 = "思いついたアイデア";

		List<String> typeList = new ArrayList<String>();
		typeList.add(test1);
		typeList.add(test2);
		typeList.add(test3);
		typeList.add(test4);
		typeList.add(test5);
		typeList.add(test6);
		// If you want to set the Default Value of combo box,
		// write like following.
		// mType.setObject("Diary");

		DropDownChoice cmbType = new DropDownChoice("type", mType, typeList);
		cmbType.setRequired(true);
		form.add(cmbType);

		final TextField txtDate = new TextField("date", mDate, Date.class);
		txtDate.setRequired(true);
		form.add(txtDate);// フォームにtxtdateを追加している日付？

		final TextArea txtArticle = new TextArea("article", mArticle);
		txtArticle.setRequired(true);
		form.add(txtArticle);// これは本文

		TextArea txtArticle2 = new TextArea("article2", mArticle2);
		txtArticle2.setRequired(true);
		form.add(txtArticle2);

		add(new Link("sosu") {

			@Override
			public void onClick() {
				// TODO 自動生成されたメソッド・スタブ
				System.out.println(this);

			}

		});

		add(new Link("btk") {
			@Override
			public void onClick() {
				System.out.println("ボタン");

				////////////////////////////
				ArrayList<Integer> pk = new ArrayList<Integer>();
				boolean w = true;
				double level = 2;
				Random rnd = new Random();
				int rr = 0;

				System.out.println((int) (level) + "以上の素数を入力してください。");

				while (w == true) {
					rr = rnd.nextInt(10);
					rr = rr + 5;

					Scanner scan = new Scanner(System.in);
					int sosu = (int) (scan.nextDouble());// 小数対策追加
					System.out.println(sosu + "が入力されました。");

					if (sosu < level) {
						System.out.println((int) (level) + "未満なので終了します。");
						System.out.println("記録は" + pk.size() + "個でした");
						break;
					}

					Sosu r = new Sosu();
					if (r.checksosu(sosu)) {
						System.out.println(sosu + "は素数です");

						for (int i = 1; i < pk.size() + 1; i++) {
							if (pk.get(i - 1) == sosu) {
								System.out.println("しかし" + i + "番目に入力した素数と重複しました。終了します");
								System.out.println("記録は" + pk.size() + "個でした。");
								w = false;
								break;

							}
						}

						if (w == true) {
							pk.add(sosu);
						}

					} else {
						System.out.println("素数ではなかったようです。");
						System.out.println("記録は" + pk.size() + "個でした。");
						w = false;
						break;

					}
					if (w == true) {
						level = (int) (level * 1.2);
						level = level + rr;
						System.out.println((int) (level) + "以上の素数を入力してください。\nただし同じ素数は使えません");
					}
				}

				//////////////////////////////
			}
		});

	}

	public Model getMSubject() {
		return mSubject;
	}

	public Model getMSubject2() {
		return mSubject2;
	}

	public Model getMType() {
		return mType;
	}

	public Model getMDate() {
		return mDate;
	}

	public Model getMArticle() {
		return mArticle;
	}

	public Model getMArticle2() {
		return mArticle2;
	}
}